name: Build and Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Server
        working-directory: ./server
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest

      - name: Build and push Front
        working-directory: ./front
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/next-front:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/next-front:latest

      - name: Build and push Nginx
        working-directory: ./nginx
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nginx-proxy:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nginx-proxy:latest

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          key: ${{ secrets.EC2_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          script: |
            mkdir -p /home/ubuntu/myapp
            cd /home/ubuntu/myapp

            # docker-compose.yml 생성
            cat << 'EOF' > docker-compose.yml
            version: '3.8'

            services:
              front:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/next-front:latest
                ports:
                  - "3000:3000"
                environment:
                  - NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

              server:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest
                ports:
                  - "4000:4000"
                environment:
                  - NODE_ENV=production
                  - DATABASE_URL=${{ secrets.DATABASE_URL }}
                  - JWT_SECRET=${{ secrets.JWT_SECRET }}
                  - JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
                  - JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
                  - REFRESH_TOKEN_TTL=${{ secrets.REFRESH_TOKEN_TTL }}
                  - EMAIL_VERIFICATION_TOKEN_TTL=${{ secrets.EMAIL_VERIFICATION_TOKEN_TTL }}
                  - CLIENT_URL=${{ secrets.CLIENT_URL }}
                  - KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
                  - KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}
                  - AWS_BUCKET_REGION=${{ secrets.AWS_BUCKET_REGION }}
                  - AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
                  - S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
                  - S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
                  - REDIS_REFRESH_TOKEN_EXPIRATION=${{ secrets.REDIS_REFRESH_TOKEN_EXPIRATION }}
                  - UPSTASH_REDIS=${{ secrets.UPSTASH_REDIS }}
                  - UPSTASH_REDIS_PASSWORD=${{ secrets.UPSTASH_REDIS_PASSWORD }}
                  - UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}
                  - UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}

              nginx:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/nginx-proxy:latest
                ports:
                  - "80:80"
                depends_on:
                  - front
                  - server
            EOF

            # 배포
            sudo docker system prune -af
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/next-front:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nginx-proxy:latest
            docker-compose down
            docker-compose up -d
