name: Build and Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Server
        working-directory: ./server
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest

      - name: Start Server for Frontend Build
        run: |
          # 백엔드 서버를 호스트 네트워크로 실행
          docker run -d --name temp-server \
            --network host \
            -e NODE_ENV=production \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }} \
            -e JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }} \
            -e REFRESH_TOKEN_TTL=${{ secrets.REFRESH_TOKEN_TTL }} \
            -e CLIENT_URL=${{ secrets.CLIENT_URL }} \
            -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
            -e KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }} \
            -e AWS_BUCKET_REGION=${{ secrets.AWS_BUCKET_REGION }} \
            -e AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} \
            -e S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }} \
            -e S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }} \
            -e REDIS_REFRESH_TOKEN_EXPIRATION=${{ secrets.REDIS_REFRESH_TOKEN_EXPIRATION }} \
            -e UPSTASH_REDIS=${{ secrets.UPSTASH_REDIS }} \
            -e UPSTASH_REDIS_PASSWORD=${{ secrets.UPSTASH_REDIS_PASSWORD }} \
            -e UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }} \
            -e UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest

          # 서버가 준비될 때까지 대기 (최대 120초)
          for i in {1..60}; do
            if curl -f http://127.0.0.1:4000/api/health; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting for server... ($i/60)"
            sleep 2
          done

          # 서버가 준비되지 않으면 에러 발생
          if ! curl -f http://127.0.0.1:4000/api/health; then
            echo "Server failed to start within 120 seconds"
            docker logs temp-server
            exit 1
          fi

      - name: Build and push Front
        working-directory: ./front
        run: |
          echo "Using temporary server for build: http://127.0.0.1:4000/api"
          docker build \
             --build-arg NEXT_PUBLIC_API_URL=http://127.0.0.1:4000/api \
             --network host \
             -t ${{ secrets.DOCKERHUB_USERNAME }}/next-front:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/next-front:latest

      - name: Stop temporary server
        run: |
          docker stop temp-server
          docker rm temp-server

      - name: Build and push Nginx
        working-directory: ./nginx
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nginx-proxy:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nginx-proxy:latest

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          key: ${{ secrets.EC2_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          script: |
            mkdir -p /home/ubuntu/myapp
            cd /home/ubuntu/myapp

            # docker-compose.yml 생성
            cat << 'EOF' > docker-compose.yml
            version: '3.8'

            services:
              server:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest
                ports:
                  - "4000:4000"
                environment:
                  - NODE_ENV=production
                  - DATABASE_URL=${{ secrets.DATABASE_URL }}
                  - JWT_SECRET=${{ secrets.JWT_SECRET }}
                  - JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
                  - JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
                  - REFRESH_TOKEN_TTL=${{ secrets.REFRESH_TOKEN_TTL }}
                  - CLIENT_URL=${{ secrets.CLIENT_URL }}
                  - KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
                  - KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}
                  - AWS_BUCKET_REGION=${{ secrets.AWS_BUCKET_REGION }}
                  - AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
                  - S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
                  - S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
                  - REDIS_REFRESH_TOKEN_EXPIRATION=${{ secrets.REDIS_REFRESH_TOKEN_EXPIRATION }}
                  - UPSTASH_REDIS=${{ secrets.UPSTASH_REDIS }}
                  - UPSTASH_REDIS_PASSWORD=${{ secrets.UPSTASH_REDIS_PASSWORD }}
                  - UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}
                  - UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                networks:
                  - app-network

              front:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/next-front:latest
                ports:
                  - "3000:3000"
                environment:
                  - NEXT_PUBLIC_API_URL=https://www.cicardi.store/api
                  - API_URL=http://server:4000/api
                depends_on:
                  server:
                    condition: service_healthy
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                networks:
                  - app-network

              nginx:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/nginx-proxy:latest
                ports:
                  - "80:80"
                  - "443:443"
                depends_on:
                  - front
                  - server
                networks:
                  - app-network

            networks:
              app-network:
                driver: bridge

            EOF
            echo "docker-compose.yml created"
            docker --version
            docker-compose --version
            sudo docker system prune -af || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nest-server:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/next-front:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nginx-proxy:latest
            docker-compose down
            docker-compose up -d
            echo "Deployment completed"
